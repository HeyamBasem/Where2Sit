# -*- coding: utf-8 -*-
"""Where2sit.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BJx1qTwSZSX5QNnk5c0rcdQxwT3T1Jbx

Generate a synthetic dataset for users and seats
"""

pip install faker

!pip uninstall numpy -y
!pip install "numpy<2.0"

import pandas as pd
import numpy as np
from faker import Faker
from surprise import Dataset, Reader, SVD
from surprise.model_selection import cross_validate

"""Generate Synthetic User Data"""

fake = Faker()
num_users = 200  # simulate 200 users (stadium fans)

# Extend user profile with additional factors
users = []
for i in range(num_users):
    users.append({
        'user_id': i,
        'age': np.random.randint(18, 80),
        'has_children': np.random.choice([0, 1]),
        'has_disabilities': np.random.choice([0, 1], p=[0.9, 0.1]),
        'fan_type': np.random.choice(['home', 'away'], p=[0.7, 0.3]),
        'has_breathing_prob': np.random.choice([0, 1], p=[0.9, 0.1]),
        'gender': np.random.choice(['Male', 'Female']),
        'group_status': np.random.choice(['single', 'couple', 'group'], p=[0.6, 0.3, 0.1]),
        'preferred_gender_around': np.random.choice(['same', 'different', 'no_preference']),
        'need_near_bathroom': np.random.choice([0, 1], p=[0.8, 0.2]),
        'prefer_noise': np.random.choice([0, 1]),  # 0: prefers quiet, 1: prefers noisy
        'prefer_away_from_sun': np.random.choice([0, 1]),  # 1: prefers shaded area
        'love_near_screens': np.random.choice([0, 1]),
        'vip_status': np.random.choice([0, 1], p=[0.85, 0.15])
    })
users_df = pd.DataFrame(users)
print("User sample:")
print(users_df.head())

"""Generate Synthetic Seat Data for Etihad Stadium"""

num_seats = 300  # simulate 300 seats

sections = ['North', 'South', 'East', 'West', 'VIP']
seat_categories = ['Standard', 'Premium', 'VIP']

# Create synthetic seat data and include an additional "price" attribute.
seats = []
for j in range(num_seats):
    # Determine section and seat category
    section = np.random.choice(sections, p=[0.25, 0.25, 0.25, 0.20, 0.05])
    seat_category = np.random.choice(seat_categories, p=[0.7, 0.25, 0.05])
    seat_vip_flag = 0
    # If section is VIP, override category and vip flag.
    if section == 'VIP':
        seat_category = 'VIP'
        seat_vip_flag = 1
    # Set price based on seat category.
    # For example, Standard: $10 - $20, Premium: $21 - $30, VIP: $31 - $50.
    if seat_category == 'Standard':
        price = np.random.uniform(10, 20)
    elif seat_category == 'Premium':
        price = np.random.uniform(21, 30)
    else:  # VIP
        price = np.random.uniform(31, 50)

    seats.append({
        'seat_id': j,
        'section': section,
        'seat_category': seat_category,
        'proximity_to_exit': np.random.uniform(0, 1),
        'legroom': np.random.uniform(0.5, 1.0),
        'distance_to_bathroom': np.random.uniform(0, 1),
        'noise_level': np.random.uniform(0, 1),
        'sun_exposure': np.random.uniform(0, 1),
        'proximity_to_screens': np.random.uniform(0, 1),
        'seat_vip': seat_vip_flag,
        'price': price
    })
seats_df = pd.DataFrame(seats)
print("\nSeat sample:")
print(seats_df.head())

"""Generate Synthetic Ratings Data"""

ratings = []
for _, user in users_df.iterrows():
    for _, seat in seats_df.iterrows():
        # Base satisfaction score
        satisfaction = 3.0

        # Seat category bonus
        if seat['seat_category'] == 'VIP':
            satisfaction += 1.0
        elif seat['seat_category'] == 'Premium':
            satisfaction += 0.5

        # Legroom bonus
        satisfaction += (seat['legroom'] - 0.5)

        # Closer proximity to exit is better
        satisfaction += (1 - seat['proximity_to_exit']) * 0.3

        # Bathroom proximity: bonus if needed and seat is near bathroom
        if user['need_near_bathroom'] == 1 and seat['distance_to_bathroom'] < 0.3:
            satisfaction += 0.5

        # Noise preference
        if user['prefer_noise'] == 0 and seat['noise_level'] < 0.4:
            satisfaction += 0.3
        elif user['prefer_noise'] == 1 and seat['noise_level'] > 0.6:
            satisfaction += 0.3

        # Sun exposure preference
        if user['prefer_away_from_sun'] == 1 and seat['sun_exposure'] < 0.4:
            satisfaction += 0.3
        elif user['prefer_away_from_sun'] == 0 and seat['sun_exposure'] > 0.6:
            satisfaction += 0.3

        # Screens: bonus if near screens and user loves screens
        if user['love_near_screens'] == 1 and seat['proximity_to_screens'] > 0.6:
            satisfaction += 0.4

        # VIP status of user: if VIP, expects VIP seat
        if user['vip_status'] == 1:
            if seat['seat_vip'] == 1:
                satisfaction += 0.5
            else:
                satisfaction -= 0.5

        # Breathing problem: bonus if seat is quiet
        if user['has_breathing_prob'] == 1 and seat['noise_level'] < 0.3:
            satisfaction += 0.3

        # Bonus for older users in Premium/VIP seats
        if user['age'] > 50 and seat['seat_category'] in ['Premium', 'VIP']:
            satisfaction += 0.2

        # Incorporate some randomness
        satisfaction += np.random.normal(0, 0.2)

        # Clip the final rating between 1 and 5
        rating = np.clip(satisfaction, 1, 5)
        ratings.append({
            'user_id': user['user_id'],
            'seat_id': seat['seat_id'],
            'rating': rating
        })
ratings_df = pd.DataFrame(ratings)
print("\nRatings sample:")
print(ratings_df.head())

"""Build and Evaluate the Recommendation Model with Surprise"""

# Create a Surprise Reader object with the rating scale
reader = Reader(rating_scale=(1, 5))

# Load the ratings DataFrame into a Surprise dataset
data = Dataset.load_from_df(ratings_df[['user_id', 'seat_id', 'rating']], reader)

# Use 3-fold cross-validation on the SVD algorithm
algo = SVD()
cv_results = cross_validate(algo, data, measures=['RMSE'], cv=3, verbose=True)

# Train the model on the full dataset
trainset = data.build_full_trainset()
algo.fit(trainset)

# Predict a rating for a specific user and seat (example: user 0 and seat 0)
user_to_predict = 0
seat_to_predict = 0
prediction = algo.predict(user_to_predict, seat_to_predict)
print(f"\nPredicted rating for user {user_to_predict} on seat {seat_to_predict}: {prediction.est:.2f}")

"""Generate Top-N Recommendations with Price Range Filtering"""

def get_top_n_recommendations(algo, user_id, seats_df, n=5, price_range=None):
    """
    Returns top-n recommendations for a given user within an optional price range.

    Parameters:
      - algo: Trained Surprise model.
      - user_id: The target user ID.
      - seats_df: DataFrame containing seat information, must include 'seat_id' and 'price'.
      - n: Number of recommendations to return.
      - price_range: Tuple (min_price, max_price). Only seats with price in this range are considered.

    Returns:
      - List of tuples (seat_id, predicted_rating, seat info as dict)
    """
    predictions = []

    # Filter seats by price range if provided
    if price_range is not None:
        min_price, max_price = price_range
        filtered_seats = seats_df[(seats_df['price'] >= min_price) & (seats_df['price'] <= max_price)]
    else:
        filtered_seats = seats_df

    for seat_id in filtered_seats['seat_id'].unique():
        pred = algo.predict(user_id, seat_id).est
        predictions.append((seat_id, pred))

    # Sort by predicted rating (highest first)
    predictions.sort(key=lambda x: x[1], reverse=True)
    top_n = predictions[:n]

    # Add additional seat information
    results = []
    for seat_id, rating in top_n:
        seat_info = seats_df[seats_df['seat_id'] == seat_id].iloc[0].to_dict()
        results.append((seat_id, rating, seat_info))
    return results

# Example: Get top 5 recommendations for user 0 in a given price range (e.g., $15 to $25)
price_range_input = (15, 25)
user_id_to_recommend = 0
top_recommendations = get_top_n_recommendations(algo, user_id_to_recommend, seats_df, n=5, price_range=price_range_input)

print(f"\nTop recommendations for user {user_id_to_recommend} within price range {price_range_input}:")
for rec in top_recommendations:
    seat_id, predicted_rating, seat_info = rec
    print(f"Seat ID: {seat_id}, Predicted Rating: {predicted_rating:.2f}, "
          f"Section: {seat_info['section']}, Category: {seat_info['seat_category']}, "
          f"Price: ${seat_info['price']:.2f}")

"""Simulate Incorporating a New User Review"""

def add_new_review(user_id, seat_id, new_rating):
    global ratings_df, data, trainset, algo
    new_entry = {'user_id': user_id, 'seat_id': seat_id, 'rating': new_rating}
    ratings_df = pd.concat([ratings_df, pd.DataFrame([new_entry])], ignore_index=True)
    data = Dataset.load_from_df(ratings_df[['user_id', 'seat_id', 'rating']], reader)
    trainset = data.build_full_trainset()
    algo.fit(trainset)
    print(f"\nModel updated with new rating: user {user_id}, seat {seat_id}, rating {new_rating}")

# Simulate: user 5 rates seat 10 with a rating of 4.8
add_new_review(user_id=5, seat_id=10, new_rating=4.8)
updated_prediction = algo.predict(5, 10)
print(f"Updated predicted rating for user 5 on seat 10: {updated_prediction.est:.2f}")